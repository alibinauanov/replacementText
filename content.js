chrome.runtime.onMessage.addListener(async (message) => {
  const { replacementPhrases } = await chrome.storage.sync.get(
    "replacementPhrases"
  );

  if (message.action === "replacePhrases") replaceValues(replacementPhrases);
});

async function replaceValues(replacementPhrases) {
  let site = "";
  const { currentURL: url } = await chrome.storage.sync.get("currentURL");

  if (url.includes("docs.google.com")) site = "docs";
  if (url.includes("docs.google.com/spreadsheets/")) site = "sheets";
  if (url.includes("docs.google.com/presentation/")) site = "slides";
  if (url.includes("mail.google.com")) site = "gmail";

  if (url.includes("docs.google.com") || site == "gmail") {
    const focusWindow = window.open("");
    focusWindow.close();
  }

  for (let i = 0; i < replacementPhrases.length; i++) {
    const phrase = replacementPhrases[i];

    if (phrase["enabled"]) {
      if (site != "gmail")
        await replaceValuesOnGoogleService(
          phrase.toReplace,
          phrase.replaceWith,
          site
        );
      else await replaceValuesOnGmail(phrase.toReplace, phrase.replaceWith);
    }
  }

  if (replacementPhrases.length > 0) {
    switch (site) {
      case "docs":
      case "sheets":
      case "slides":
        break;
    }
  }
}

async function replaceValuesOnGmail(valueToReplace, replacementValue) {
  chrome.storage.sync.get("lastSelectedGmailTextboxID", async (data) => {
    const lastSelectedTextboxID = data["lastSelectedGmailTextboxID"];
    const lastSelectedTextbox = document.getElementById(lastSelectedTextboxID);

    if (lastSelectedTextbox !== undefined)
      lastSelectedTextbox.innerHTML = lastSelectedTextbox.innerHTML.replaceAll(
        valueToReplace,
        replacementValue
      );
  });
}

async function replaceValuesOnGoogleService(
  valueToReplace,
  replacementValue,
  site
) {
  let advanceInterval = 100; // Advancement interval in ms

  const keyElements = {
    docs: new KeyElements(
      "div.docs-findandreplacedialog span.modal-dialog-title-close",
      "#docs-findandreplacedialog-input",
      "#docs-findandreplacedialog-replace-input",
      "#docs-findandreplacedialog-button-replace-all"
    ),
    sheets: new KeyElements(
      "div.waffle-find-replace-dialog span.modal-dialog-title-close",
      'input[aria-labelledby*="findLabel"]',
      'input[aria-labelledby*="replaceLabel"]',
      'button[name="replaceAll"]'
    ),
    slides: new KeyElements(
      "div.docs-findandreplacedialog span.modal-dialog-title-close",
      "#docs-findandreplacedialog-input",
      "#docs-findandreplacedialog-replace-input",
      "#docs-findandreplacedialog-button-replace-all"
    ),
  };

  return new Promise(async (resolve) => {
    // Press Ctrl + H to bring up 'replace all' menu
    openReplaceAllMenu();

    // Cache important UI elements from 'replace all' menu
    const replaceMenuCloseButton = document.querySelector(
      keyElements[site].replaceMenuCloseButton
    );
    const findInput = document.querySelector(keyElements[site].findInput);
    const replaceInput = document.querySelector(keyElements[site].replaceInput);
    const replaceAllButton = document.querySelector(
      keyElements[site].replaceAllButton
    );

    // Delay different phases of this procedure by 100ms so that there is enough time for menu elements to be generated by docs
    await sleep(advanceInterval);

    // Put the value to be replaced in the 'find' input field
    findInput.value = valueToReplace;

    if (site == "docs" || site == "slides") {
      clickElement(replaceMenuCloseButton);
      openReplaceAllMenu();

      await sleep(advanceInterval);
    }

    replaceInput.click();
    replaceInput.focus();

    // Put the replacement value in the 'replace with' input field
    replaceInput.value = replacementValue;

    if (site == "sheets") {
      const sheetsFindReplaceDialog = document.querySelector(
        "div.waffle-find-replace-dialog"
      );

      sheetsFindReplaceDialog.click();
      sheetsFindReplaceDialog.focus();
    }

    // Click the 'replace all' button
    clickElement(replaceAllButton);

    // Reset input fields
    findInput.value = "";
    replaceInput.value = "";

    // Close Menu
    clickElement(replaceMenuCloseButton);

    await sleep(advanceInterval * 2);

    resolve();
  });
}
